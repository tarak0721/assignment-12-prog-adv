1. For this challenge, forget how to add two numbers together. The best explanation on what to do for this function is this meme:
image.png

Examples:
meme_sum(26, 39) ➞ 515
# 2+3 = 5, 6+9 = 15
# 26 + 39 = 515
meme_sum(122, 81) ➞ 1103
# 1+0 = 1, 2+8 = 10, 2+1 = 3
# 122 + 81 = 1103
meme_sum(1222, 30277) ➞ 31499
def meme_sum(a,b):
    a,b = str(a),str(b)
    output = ''
    while len(a) != len(b):
        if len(a) < len(b):
            a ='0'+a
        else:
            b='0'+b
    for ele in range(len(a)):
        output += str(int(a[ele])+int(b[ele]))
    print(f'meme_sum{a,b} ➞ {output}')
       
meme_sum(26, 39)
meme_sum(122, 81)
meme_sum(1222, 30277) 
2. Given an integer, create a function that returns the next prime. If the number is prime, return the number itself.
Examples:
next_prime(12) ➞ 13
next_prime(24) ➞ 29
next_prime(11) ➞ 11
# 11 is a prime, so we return the number itself.

def next_prime(in_num):
    in_num_clone = in_num
    while True:
        if (in_num-1)%6 == 0 or (in_num+1)%6 ==0 :
            temp = in_num
            for ele in range(3,in_num+1):
                if in_num%ele == 0 and ele != in_num:
                    in_num = in_num+1
                    break
            if temp == in_num:
                break
        else:
            in_num += 1
    
    print(f'next_prine({in_num_clone}) ➞ {in_num}')
        
next_prime(12)
next_prime(24)
next_prime(11)
3. If a person traveled up a hill for 18mins at 20mph and then traveled back down the same path at 60mph then their average speed traveled was 30mph.
Write a function that returns the average speed traveled given an uphill time, uphill rate and a downhill rate. Uphill time is given in minutes. Return the rate as an integer (mph). No rounding is necessary.

Examples:
ave_spd(18, 20, 60) ➞ 30
ave_spd(30, 10, 30) ➞ 15
ave_spd(30, 8, 24) ➞ 12

def ave_spd(up_time,up_speed,down_speed):
    distance = up_speed*(up_time/60)
    down_time = distance/down_speed
    output = (2*distance)/((up_time/60)+down_time)
    print(f'ave_spd{up_time,up_speed,down_speed} ➞ {int(output)}')
    
ave_spd(18, 20, 60)
ave_spd(30, 10, 30)
ave_spd(30, 8, 24)
4. The Kempner Function, applied to a composite number, permits to find the smallest integer greater than zero whose factorial is exactly divided by the number.
kempner(6) ➞ 3
1! = 1 % 6 > 0
2! = 2 % 6 > 0
3! = 6 % 6 === 0

kempner(10) ➞ 5
1! = 1 % 10 > 0
2! = 2 % 10 > 0
3! = 6 % 10 > 0
4! = 24 % 10 > 0
5! = 120 % 10 === 0

A Kempner Function applied to a prime will always return the prime itself.
kempner(2) ➞ 2
kempner(5) ➞ 5

Given an integer n, implement a Kempner Function.

Examples:
kempner(6) ➞ 3
kempner(10) ➞ 5
kempner(2) ➞ 2

def kempner(in_num):
    def factorial(in_num):
        if in_num == 1:
            return 1
        else:
            return in_num * factorial(in_num-1)
            for ele in range(1,in_num+1):
        if factorial(ele)%in_num == 0:
            output = ele
            break
    print(f'kempner({in_num}) ➞ {output}')
            
kempner(6)
kempner(10)
kempner(5)
kempner(2)
5. You work in a factory, and your job is to take items from a conveyor belt and pack them into boxes. Each box can hold a maximum of 10 kgs. Given a list containing the weight (in kg) of each item, how many boxes would you need to pack all of the items?
Examples:
boxes([2, 1, 2, 5, 4, 3, 6, 1, 1, 9, 3, 2]) ➞ 5
# Box 1 = [2, 1, 2, 5] (10kg)
# Box 2 = [4, 3] (7kg)
# Box 3 = [6, 1, 1] (8kg)
# Box 4 = [9] (9kg)
# Box 5 = [3, 2] (5kg)

def boxes(in_list):
    in_list_clone = in_list.copy()
    output = []
    temp_box = []
    while True:
        if len(in_list) != 0:
            if sum(temp_box) <= 10:
                temp_box.append(in_list.pop(0))
            else:
                in_list.insert(0,temp_box.pop())
                output.append(temp_box)
                temp_box = []
        else:
            output.append(temp_box)
            temp_box = []
            break
    print(f'boxes({in_list_clone}) ➞ {output} ➞ {len(output)}')    
    
boxes([2, 1, 2, 5, 4, 3, 6, 1, 1, 9, 3, 2])
boxes([5, 5, 5, 5, 5, 5, 2, 3, 4, 5, 6])
